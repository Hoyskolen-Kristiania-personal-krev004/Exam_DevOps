
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    env:
        ECR_REGISTRY: 244530008913.dkr.ecr.eu-west-1.amazonaws.com
        ECR_REPOSITORY: candidate2025_ecr_repo
    steps:
    - name: Checkout code 
      uses: actions/checkout@v2
      
    - name: Configure credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
      
    - name: Build and Tag Images
      run: |
        aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
        rev=$(git rev-parse --short HEAD)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$rev .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$rev $ECR_REGISTRY/$ECR_REPOSITORY:latest
    - name: Push to ECR
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
        rev=$(git rev-parse --short HEAD)
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$rev
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  
  terraform:
    name: "Terraform"
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-1
      IMAGE: 244530008913.dkr.ecr.eu-west-1.amazonaws.com/candidate2025_ecr_repo:latest
      ARN: arn:aws:iam::244530008913:role/service-role/AppRunnerECRAccessRole
    
    steps: 
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -var="arn=$ARN" -var="img_id=$IMAGE" -no-color
        continue-on-error: true
        
      - name: Terrafrom Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var="arn=$ARN" -var="img_id=$IMAGE" -auto-approve